   Toggle the navigation pane
   [toggle_navigation.gif]
   Add to Favorites
   [add_favorite.gif]
   Home: Autodesk FBX SDK Documentation
   [nav-home-xp.gif]
   Share
   [nav-share.gif]
   [nav-print.gif]

   [nav-null-xp.gif]
   [nav-null-xp.gif]
   [nav-null-xp.gif]


   Translate this page
   Powered by Microsoft® Translator
   FbxProgress Class Reference







     * Main Page

   Public Member Functions
   FbxProgress Class Reference

   This reference page is linked to from the following overview topics: FBX SDK 2014, List of Python Fbx classes.


   Search for all occurrences

   #include <fbxprogress.h>


Class Description

   Class for progress reporting.

   Definition at line 31 of file fbxprogress.h.

   List of all members.

Public Member Functions

    void  SetProgressCallback (FbxProgressCallback pCallback, void *pArgs=NULL)
          Register a callback function for progress reporting in single thread mode.
    void  SetTotal (float pTotal)
          Set the total amount of workload needed to complete the progress.
    void  SetThreshold (float pThreshold)
          Set the threshold at which the progress callback should be called.
    void  Update (float pDelta, const char *pStatus=NULL)
          Update current progress with recent workload.
    void  Reset ()
          Reset the progress status percentage and status string.
   float  GetProgress (FbxString *pStatus=NULL)
          Retrieve the progress status.
    void  Complete (const char *pStatus=NULL)
          Set the progress status to completed.
    void  Cancel ()
          Cancel this progress.
    bool  IsCanceled () const
          Query whether user canceled this progress.


Member Function Documentation

   void SetProgressCallback ( FbxProgressCallback  pCallback,
                              void *               pArgs = NULL
                            )
   Search for all occurrences

   Register a callback function for progress reporting in single thread mode.

   Parameters:

          pCallback Pointer of the callback function.
          pArgs     Pointer to the optional arguments passed to the callback function.

   void SetTotal ( float  pTotal )
   Search for all occurrences

   Set the total amount of workload needed to complete the progress.

   Parameters:

          pTotal Total amount of workload.

   Remarks:
          The default total is 100.0.

   void SetThreshold ( float  pThreshold )
   Search for all occurrences

   Set the threshold at which the progress callback should be called.

   Parameters:

          pThreshold The threshold value, between 0.0 and 100.0, that triggers the callback.

   Remarks:
          The default threshold is 1.0, meaning that every 1% the callback is triggered.

   void Update ( float         pDelta,
                 const char *  pStatus = NULL
               )
   Search for all occurrences

   Update current progress with recent workload.

   Parameters:

          pDelta  Delta amount of workload progressed so far.
          pStatus Optional current progress status string.

   Remarks:
          If a callback is set, it will be called upon caling this function.

   void Reset ( )
   Search for all occurrences

   Reset the progress status percentage and status string.
   float GetProgress ( FbxString *  pStatus = NULL )
   Search for all occurrences

   Retrieve the progress status.

   Parameters:

          pStatus Optional current progress status string.

   Returns:
          The current progress percentage.

   void Complete ( const char *  pStatus = NULL )
   Search for all occurrences

   Set the progress status to completed.

   Parameters:

          pStatus Optional current progress status string.

   void Cancel ( )
   Search for all occurrences

   Cancel this progress.
   bool IsCanceled ( ) const [inline]
   Search for all occurrences

   Query whether user canceled this progress.

   Definition at line 71 of file fbxprogress.h.
{ return mCanceled; }


   The documentation for this class was generated from the following file:
     * fbxsdk/fileio/fbxprogress.h

   Please send us your comment about this page
