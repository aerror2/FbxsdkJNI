   Toggle the navigation pane
   [toggle_navigation.gif]
   Add to Favorites
   [add_favorite.gif]
   Home: Autodesk FBX SDK Documentation
   [nav-home-xp.gif]
   Share
   [nav-share.gif]
   [nav-print.gif]

   [nav-null-xp.gif]
   [nav-null-xp.gif]
   [nav-null-xp.gif]


   Translate this page
   Powered by Microsoft® Translator
   FbxAnimEvaluator Class Reference







     * Main Page

   Public Member Functions
   FbxAnimEvaluator Class Reference

   This reference page is linked to from the following overview topics: FBX SDK 2014, Migrating to the New Data Structures for Animation, Feature-Oriented Programs, Writing and Using your Own Evaluator, FBX Scenes, Transformation Data, Bypassing the Blend Mode for Specific Data Types, Evaluating the Animation in a Scene.


   Search for all occurrences

   #include <fbxanimevaluator.h>


Class Description

   The principal interface for animation evaluators.

   The animation evaluator is used to compute node transforms and property values at specific times during an animation. Evaluators simplify the process of computing transform matrices by taking into account all of the parameters, such as pre- and post-rotations. This class is abstract so that SDK users can implement their own evaluator if needed. The default evaluator used by the FBX SDK is a FbxAnimEvalClassic. The default evaluator can be queried with the function FbxScene::GetEvaluator(), and can
   be changed using FbxScene::SetEvaluator().

   When working with scene nodes, the evaluator will always return an affine transform matrix that contains the translation, rotation and scale of that node.

   When working with object properties, the evaluator will always return a structure that can contain as many components as the property can have. For example, an RGB color property would return a structure containing 3 channels. The class FbxAnimCurveNode is used as a data container to store those values, because it can handle as many channels as needed, even if the property is not a real curve node .

   Below is a typical usage of the evaluator class to retrieve the global transform matrix of each node in a scene:
 //Here we assume the user already imported a scene...
 for( int i = 0, c = MyScene->GetMemberCount(FbxNode::ClassId); i < c; ++i )
 {
     FbxNode* CurrentNode = MyScene->GetMember(FbxNode::ClassId, i);
     FbxAMatrix& NodeGlobalTransform = MyScene->GetEvaluator()->GetNodeGlobalTransform(CurrentNode);
 }

 //There is an equivalent call to retrieve a node's global transform, which is exactly the same as calling Scene->GetEvaluator() :
 FbxAMatrix& NodeGlobalTransform = CurrentNode->EvaluateGlobalTransform();

   Another typical usage of the evaluator class, but this time to retrieve the value of an animated color property on a material:
 //Assuming the user imported a scene with objects and materials...
 FbxColor Color = MyMaterial->GetDiffuseColor()->EvaluateValue();

   Note:
          Note that all the methods to retrieve global/local matrices as well as property values returns references. This is important for performance purposes, to prevent an extra memory copy.

   See also:
          FbxScene, FbxAnimEvalClassic, FbxAnimCurveNode

   Definition at line 61 of file fbxanimevaluator.h.
   Inheritance diagram for FbxAnimEvaluator:
   [USEMAP:class_fbx_anim_evaluator.png]

   List of all members.

Public Member Functions

                 //void  SetContext (FbxAnimStack *pAnimStack)
                       Set the evaluator context, which represent which animation stack should be evaluated.
       //FbxAnimStack *  GetContext ()
                       Get the current evaluator context.

         FbxAMatrix &  GetNodeGlobalTransform (FbxNode *pNode, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Returns a node's global transformation matrix at the specified time.
         FbxAMatrix &  GetNodeLocalTransform (FbxNode *pNode, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Returns a node's local transformation matrix at the specified time.
         FbxVector4 &  GetNodeLocalTranslation (FbxNode *pNode, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Returns the value of a node's LclTranslation property at the specified time.
         FbxVector4 &  GetNodeLocalRotation (FbxNode *pNode, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Returns the value of a node's LclRotation property at the specified time.
         FbxVector4 &  GetNodeLocalScaling (FbxNode *pNode, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Returns the value of a node's LclScaling property at the specified time.
   template<class T >
                    T  GetPropertyValue (FbxProperty &pProperty, const FbxTime &pTime, bool pForceEval=false)
                       Get a property's value at the specified time using the template type provided.
   FbxPropertyValue &  GetPropertyValue (FbxProperty &pProperty, const FbxTime &pTime, bool pForceEval=false)
                       Get a property's value at the specified time.
   FbxAnimCurveNode *  GetPropertyCurveNode (FbxProperty &pProperty, FbxAnimLayer *pAnimLayer)
                       Get a property curve node from the evaluation state for quick access.
              FbxTime  ValidateTime (const FbxTime &pTime)
                       Validate if the given time value is within animation stack time span range.
                 void  Reset ()
                       Completely reset the evaluation state cache by deleting all entries.
                 void  Flush (FbxNode *pNode)
                       Clears the specified node evaluation state cache, so the next time the evaluation is called for this node it get refreshed.
                 void  Flush (FbxProperty &pProperty)
                       Clears the specified property evaluation state cache, so the next time the evaluation is called for this property it get refreshed.
                 void  ComputeLocalTRSFromGlobal (FbxVector4 &pRetLT, FbxVector4 &pRetLR, FbxVector4 &pRetLS, FbxNode *pNode, FbxAMatrix &pGX, const FbxTime &pTime=FBXSDK_TIME_INFINITE, FbxNode::EPivotSet pPivotSet=FbxNode::eSourcePivot, bool pApplyTarget=false, bool pForceEval=false)
                       Compute node local TRS from global transform.


Member Function Documentation

   void SetContext ( FbxAnimStack *  pAnimStack )
   Search for all occurrences

   Set the evaluator context, which represent which animation stack should be evaluated.

   When no context is specified, the FBX SDK will try to automatically pick the first animation stack available in the scene and set it as the current context. If no animation stack are available, the evaluator will not be able to evaluate the scene's animation. Only one context can be evaluated at a time per evaluator.

   Parameters:

          pAnimStack The animation stack to evaluate when using this evaluator.

   Remarks:
          When changing the current context, the evaluator will automatically clear any animation evaluation cache present in memory.

   See also:
          FbxAnimStack

   Examples:
          Animation/main.cxx.

   FbxAnimStack* GetContext ( )
   Search for all occurrences

   Get the current evaluator context.

   Returns:
          The current animation stack used by the evaluator.

   Remarks:
          If no animation stack has been set, one will be automatically set during the first FbxAnimStack creation.

   FbxAMatrix& GetNodeGlobalTransform ( FbxNode *           pNode,
                                        const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                        FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                        bool                pApplyTarget = false,
                                        bool                pForceEval = false
                                      )
   Search for all occurrences

   Returns a node's global transformation matrix at the specified time.

   The node's translation, rotation and scaling limits are taken into consideration.

   Parameters:

          pNode        The node to evaluate.
          pTime        The time used for evaluate. If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
          pPivotSet    The pivot set to take into account
          pApplyTarget Applies the necessary transform to align into the target node
          pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The resulting global transform of the specified node at the specified time.

   FbxAMatrix& GetNodeLocalTransform ( FbxNode *           pNode,
                                       const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                       FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                       bool                pApplyTarget = false,
                                       bool                pForceEval = false
                                     )
   Search for all occurrences

   Returns a node's local transformation matrix at the specified time.

   The node's translation, rotation and scaling limits are taken into consideration.

   Parameters:

          pNode        The node to evaluate.
          pTime        The time used for evaluate. If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
          pPivotSet    The pivot set to take into account
          pApplyTarget Applies the necessary transform to align into the target node
          pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The resulting local transform of the specified node for the specified time.

   Remarks:
          The local transform matrix is calculated in this way: ParentGlobal.Inverse * Global, all transforms such as pre/post rotation are taken into consideration. This will return a different value than LclTranslation, LclRotation and LclScaling at the specified time. To evaluate these properties separately without taking pre/post rotation, pivots and offsets into consideration, please use GetNodeLocalTranslation(), GetNodeLocalRotation() and GetNodeLocalScaling().

   FbxVector4& GetNodeLocalTranslation ( FbxNode *           pNode,
                                         const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                         FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                         bool                pApplyTarget = false,
                                         bool                pForceEval = false
                                       )
   Search for all occurrences

   Returns the value of a node's LclTranslation property at the specified time.

   No pivot, offsets, or any other transform is taken into consideration. The translation limit is applied.

   Parameters:

          pNode        The transform node to evaluate.
          pTime        The time used for evaluate. If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
          pPivotSet    The pivot set to take into account
          pApplyTarget Applies the necessary transform to align into the target node
          pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The resulting value of LclTranslation property of the specified node at the specified time.

   FbxVector4& GetNodeLocalRotation ( FbxNode *           pNode,
                                      const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                      FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                      bool                pApplyTarget = false,
                                      bool                pForceEval = false
                                    )
   Search for all occurrences

   Returns the value of a node's LclRotation property at the specified time.

   No pre/post rotation, rotation pivot, rotation offset or any other transform is taken into consideration. The rotation limit is applied.

   Parameters:

          pNode        The transform node to evaluate.
          pTime        The time used for evaluate. If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
          pPivotSet    The pivot set to take into account
          pApplyTarget Applies the necessary transform to align into the target node
          pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The resulting value of LclRotation property of the specified node at the specified time.

   FbxVector4& GetNodeLocalScaling ( FbxNode *           pNode,
                                     const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                     FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                     bool                pApplyTarget = false,
                                     bool                pForceEval = false
                                   )
   Search for all occurrences

   Returns the value of a node's LclScaling property at the specified time.

   No scaling pivot, scaling offset or any other transform is taken into consideration. The scaling limit is applied.

   Parameters:

          pNode        The transform node to evaluate.
          pTime        The time used for evaluate. If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
          pPivotSet    The pivot set to take into account
          pApplyTarget Applies the necessary transform to align into the target node
          pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The resulting value of LclScaling property of the specified node at the specified time.

   T GetPropertyValue ( FbxProperty &    pProperty,
                        const FbxTime &  pTime,
                        bool             pForceEval = false
                      )                  [inline]
   Search for all occurrences

   Get a property's value at the specified time using the template type provided.

   Parameters:

          pProperty  The property to evaluate.
          pTime      The time used for evaluate.
          pForceEval Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The property value at the specified time converted to the template type provided, if possible.

   Remarks:
          If the property type versus the template cannot be converted, the result is unknown.

   Definition at line 139 of file fbxanimevaluator.h.
{ return GetPropertyEvalState(pProperty, pTime, pForceEval)->Get<T>(); }

   FbxPropertyValue& GetPropertyValue ( FbxProperty &    pProperty,
                                        const FbxTime &  pTime,
                                        bool             pForceEval = false
                                      )
   Search for all occurrences

   Get a property's value at the specified time.

   Parameters:

          pProperty  The property to evaluate.
          pTime      The time used for evaluate.
          pForceEval Force the evaluator to refresh the evaluation state cache even if its already up-to-date.

   Returns:
          The property value at the specified time. Use FbxPropertyValue::Get() to retrieve the value into a pointer location of your choice.

   FbxAnimCurveNode* GetPropertyCurveNode ( FbxProperty &   pProperty,
                                            FbxAnimLayer *  pAnimLayer
                                          )
   Search for all occurrences

   Get a property curve node from the evaluation state for quick access.

   Parameters:

          pProperty  The property to search for its animation curve node.
          pAnimLayer The animation layer on which the animation curve node must be searched.

   Remarks:
          This function uses a map to store animation curve node search results. If animation curve nodes are replaced, the evaluation state must be reset.

   FbxTime ValidateTime ( const FbxTime &  pTime )
   Search for all occurrences

   Validate if the given time value is within animation stack time span range.

   Parameters:

          pTime The time value to validate.

   Returns:
          The new validated time, clamped by the animation stack time span range.

   Remarks:
          If no animation stack are found, time zero is returned. This function is not used by the evaluator itself.

   void Reset ( )
   Search for all occurrences

   Completely reset the evaluation state cache by deleting all entries.

   This reset automatically happens when changing the current context.
   void Flush ( FbxNode *  pNode )
   Search for all occurrences

   Clears the specified node evaluation state cache, so the next time the evaluation is called for this node it get refreshed.

   Parameters:

          pNode The node that needs to be re-evaluated in next evaluation.

   void Flush ( FbxProperty &  pProperty )
   Search for all occurrences

   Clears the specified property evaluation state cache, so the next time the evaluation is called for this property it get refreshed.

   Parameters:

          pProperty The property that needs to be re-evaluated in next evaluation.

   void ComputeLocalTRSFromGlobal ( FbxVector4 &        pRetLT,
                                    FbxVector4 &        pRetLR,
                                    FbxVector4 &        pRetLS,
                                    FbxNode *           pNode,
                                    FbxAMatrix &        pGX,
                                    const FbxTime &     pTime = FBXSDK_TIME_INFINITE,
                                    FbxNode::EPivotSet  pPivotSet = FbxNode::eSourcePivot,
                                    bool                pApplyTarget = false,
                                    bool                pForceEval = false
                                  )
   Search for all occurrences

   Compute node local TRS from global transform.

   Doesn't change cached state for current time.

   Parameters:

          [out] pRetLT       Computed local translation.
          [out] pRetLR       Computed local rotation.
          [out] pRetLS       Computed local scaling.
                pNode        The transform node to evaluate.
                pGX          Global transformation state.
                pTime        The time used for evaluate.If FBXSDK_TIME_INFINITE is used, this returns the default value, without animation curves evaluation.
                pPivotSet    The pivot set to take into account.
                pApplyTarget Applies the necessary transform to align into the target node.
                pForceEval   Force the evaluator to refresh the evaluation state cache even if its already up-to-date.


   The documentation for this class was generated from the following file:
     * fbxsdk/scene/animation/fbxanimevaluator.h

   Please send us your comment about this page
